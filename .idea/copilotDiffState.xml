<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/antam/app/controller/HoaDonController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/antam/app/controller/HoaDonController.java" />
              <option name="originalContent" value="//&#10;// Source code recreated from a .class file by IntelliJ IDEA&#10;// (powered by FernFlower decompiler)&#10;//&#10;&#10;package com.antam.app.controller;&#10;&#10;import com.antam.app.controller.dialog.DoiThuocController;&#10;import com.antam.app.controller.dialog.TraThuocController;&#10;import com.antam.app.controller.dialog.XoaSuaThuocController;&#10;import com.antam.app.dao.HoaDon_DAO;&#10;import com.antam.app.entity.HoaDon;&#10;import com.antam.app.gui.GiaoDienCuaSo;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.DatePicker;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.beans.property.SimpleDoubleProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;import com.antam.app.controller.dialog.XemChiTietHoaDonController;&#10;import com.antam.app.dao.NhanVien_DAO;&#10;import com.antam.app.entity.NhanVien;&#10;&#10;import java.text.DecimalFormat;&#10;import java.text.DecimalFormatSymbols;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;&#10;/**&#10; * Controller cho giao diện quản lý hóa đơn (invoice_view.fxml).&#10; * - Hiển thị danh sách hóa đơn ra TableView.&#10; * - Cho phép tạo, đổi, trả hóa đơn qua các nút chức năng.&#10; * - Khi double-click vào 1 dòng hóa đơn sẽ mở dialog chi tiết hóa đơn.&#10; */&#10;public class HoaDonController {&#10;    // Các nút chức năng&#10;    @FXML&#10;    private Button btnAddInvoice; // Nút tạo hóa đơn mới&#10;    @FXML&#10;    private Button btnReturnMedicine; // Nút doi thuốc&#10;    @FXML&#10;    private Button btnExchangeMedicine; // Nút trả thuốc&#10;&#10;    // TableView và các cột hiển thị danh sách hóa đơn&#10;    @FXML&#10;    private TableView&lt;HoaDon&gt; table_invoice; // Bảng danh sách hóa đơn&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colMaHD; // Cột mã hóa đơn&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colNgayTao; // Cột ngày tạo&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colKhachHang; // Cột mã khách hàng&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colNhanVien; // Cột mã nhân viên&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colKhuyenMai; // Cột mã khuyến mãi&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, Double&gt; colTongTien; // Cột tổng tiền&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colTrangThai; // Cột trạng thái (đã huỷ/hoạt động)&#10;    @FXML&#10;    private javafx.scene.control.TextField txtSearchInvoice; // Ô nhập mã hóa đơn cần tìm&#10;    @FXML&#10;    private javafx.scene.control.Button btnSearchInvoice; // Nút tìm kiếm hóa đơn theo mã&#10;    @FXML&#10;    private ComboBox&lt;NhanVien&gt; cbEmployee; // ComboBox chọn nhân viên&#10;    @FXML&#10;    private ComboBox&lt;String&gt; cbStatus; // ComboBox chọn trạng thái&#10;    @FXML&#10;    private ComboBox&lt;String&gt; cbPrice; // ComboBox chọn khoảng giá&#10;    @FXML&#10;    private DatePicker cbFirstDate; // DatePicker chọn ngày bắt đầu&#10;    @FXML&#10;    private DatePicker cbEndDate;   // DatePicker chọn ngày kết thúc&#10;&#10;    // Định dạng tiền tệ kiểu Việt Nam: 1.000đ, 10.000đ&#10;    private static final DecimalFormat VND_FORMAT;&#10;    static {&#10;        DecimalFormatSymbols symbols = new DecimalFormatSymbols();&#10;        symbols.setGroupingSeparator('.');&#10;        symbols.setDecimalSeparator(',');&#10;        VND_FORMAT = new DecimalFormat(&quot;#,##0&quot;, symbols);&#10;    }&#10;&#10;    public HoaDonController() {&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo controller, gán sự kiện cho các nút và TableView.&#10;     * - Thiết lập cell value factory cho các cột TableView.&#10;     * - Load dữ liệu hóa đơn từ DB lên bảng.&#10;     * - Gán sự kiện double-click vào dòng để xem chi tiết hóa đơn.&#10;     */&#10;    public void initialize() {&#10;        // Gán sự kiện cho các nút chức năng&#10;        this.btnAddInvoice.setOnAction((e) -&gt; {&#10;            GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;themhoadon&quot;);&#10;            dialog.showAndWait();&#10;            // Sau khi dialog đóng, cập nhật lại bảng và chọn/tô màu dòng mới&#10;            HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;            ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;            table_invoice.setItems(hoaDonList);&#10;            // Tìm hoá đơn mới nhất (theo mã lớn nhất)&#10;            HoaDon newest = null;&#10;            int maxNum = -1;&#10;            for (HoaDon hd : hoaDonList) {&#10;                String ma = hd.getMaHD();&#10;                if (ma != null &amp;&amp; ma.matches(&quot;HD\\d+&quot;)) {&#10;                    int num = Integer.parseInt(ma.substring(2));&#10;                    if (num &gt; maxNum) {&#10;                        maxNum = num;&#10;                        newest = hd;&#10;                    }&#10;                }&#10;            }&#10;            if (newest != null) {&#10;                table_invoice.getSelectionModel().select(newest);&#10;                table_invoice.scrollTo(newest);&#10;            }&#10;        });&#10;        // duong&#10;        this.btnExchangeMedicine.setOnAction((e) -&gt; {&#10;            HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;            if (selectedHoaDon == null) {&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);&#10;                alert.setTitle(&quot;Cảnh báo&quot;);&#10;                alert.setHeaderText(&quot;Chưa chọn hóa đơn&quot;);&#10;                alert.setContentText(&quot;Vui lòng chọn ít nhất một hóa đơn.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }else{&#10;                GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;doithuoc&quot;);&#10;                // Lấy controller và set Thuoc vào&#10;                DoiThuocController controller = dialog.getController();&#10;                controller.setHoaDon(selectedHoaDon);&#10;                controller.showData(selectedHoaDon);&#10;                dialog.showAndWait();&#10;                HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;                ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.refresh();&#10;                table_invoice.setItems(hoaDonList);&#10;            }&#10;        });&#10;        // duong&#10;        this.btnReturnMedicine.setOnAction((e) -&gt; {&#10;            HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;            if (selectedHoaDon == null) {&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);&#10;                alert.setTitle(&quot;Cảnh báo&quot;);&#10;                alert.setHeaderText(&quot;Chưa chọn hóa đơn&quot;);&#10;                alert.setContentText(&quot;Vui lòng chọn ít nhất một hóa đơn.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }else{&#10;&#10;                GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;trathuoc&quot;);&#10;                // Lấy controller và set Thuoc vào&#10;                TraThuocController controller = dialog.getController();&#10;                controller.setHoaDon(selectedHoaDon);&#10;                controller.showData(selectedHoaDon);&#10;                dialog.showAndWait();&#10;                HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;                ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.refresh();&#10;                table_invoice.setItems(hoaDonList);&#10;            }&#10;        });&#10;&#10;        // Thiết lập cách lấy dữ liệu cho từng cột TableView&#10;&#10;        colMaHD.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;MaHD&quot;));&#10;        colNgayTao.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNgayTao().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;))));&#10;        colKhachHang.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaKH().getMaKH()));&#10;        colNhanVien.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaNV().getMaNV()));&#10;        colKhuyenMai.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaKM() != null ? cellData.getValue().getMaKM().getMaKM() : &quot;&quot;));&#10;        colTongTien.setCellValueFactory(cellData -&gt; new SimpleDoubleProperty(cellData.getValue().getTongTien()).asObject());&#10;        colTongTien.setCellFactory(column -&gt; new javafx.scene.control.TableCell&lt;HoaDon, Double&gt;() {&#10;            @Override&#10;            protected void updateItem(Double item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(VND_FORMAT.format(item) + &quot;đ&quot;);&#10;                }&#10;            }&#10;        });&#10;        colTrangThai.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().isDeleteAt() ? &quot;Đã huỷ&quot; : &quot;Hoạt động&quot;));&#10;&#10;        // Load dữ liệu hóa đơn từ DB lên bảng&#10;        HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;        ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;        table_invoice.setItems(hoaDonList);&#10;&#10;        // --- Khởi tạo ComboBox nhân viên ---&#10;        NhanVien_DAO nhanVienDAO = new NhanVien_DAO();&#10;        ObservableList&lt;NhanVien&gt; dsNhanVien = FXCollections.observableArrayList(NhanVien_DAO.getDsNhanVienformDBS());&#10;        // Thêm lựa chọn &quot;Tất cả&quot; vào đầu danh sách&#10;        NhanVien tatCaNV = new NhanVien(&quot;Tất cả&quot;);&#10;        dsNhanVien.add(0, tatCaNV);&#10;        cbEmployee.setItems(dsNhanVien);&#10;        cbEmployee.setPromptText(&quot;Chọn nhân viên&quot;);&#10;        // Hiển thị chỉ mã nhân viên trong ComboBox, &quot;Tất cả&quot; nếu là lựa chọn đặc biệt&#10;        cbEmployee.setCellFactory(lv -&gt; new javafx.scene.control.ListCell&lt;NhanVien&gt;() {&#10;            @Override&#10;            protected void updateItem(NhanVien item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setText(empty || item == null ? null : item.getMaNV());&#10;            }&#10;        });&#10;        cbEmployee.setButtonCell(new javafx.scene.control.ListCell&lt;NhanVien&gt;() {&#10;            @Override&#10;            protected void updateItem(NhanVien item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setText(empty || item == null ? null : item.getMaNV());&#10;            }&#10;        });&#10;        // --- Khởi tạo ComboBox trạng thái ---&#10;        ObservableList&lt;String&gt; dsTrangThai = FXCollections.observableArrayList(&quot;Tất cả&quot;, &quot;Hoạt động&quot;, &quot;Đã huỷ&quot;);&#10;        cbStatus.setItems(dsTrangThai);&#10;        cbStatus.setValue(&quot;Tất cả&quot;);&#10;        // --- Khởi tạo ComboBox khoảng giá ---&#10;        ObservableList&lt;String&gt; dsKhoangGia = FXCollections.observableArrayList(&#10;            &quot;Tất cả&quot;,&#10;            &quot;Dưới 500.000&quot;,&#10;            &quot;500.000 - 1.000.000&quot;,&#10;            &quot;1.000.000 - 2.000.000&quot;,&#10;            &quot;Trên 2.000.000&quot;&#10;        );&#10;        cbPrice.setItems(dsKhoangGia);&#10;        cbPrice.setValue(&quot;Tất cả&quot;);&#10;&#10;        // --- Hàm lọc hóa đơn theo nhân viên, trạng thái, khoảng giá, ngày ---&#10;        Runnable filterInvoices = () -&gt; {&#10;            HoaDon_DAO hoaDonDAO1 = new HoaDon_DAO();&#10;            NhanVien selectedNV = cbEmployee.getValue();&#10;            String selectedStatus = cbStatus.getValue();&#10;            String selectedPrice = cbPrice.getValue();&#10;            LocalDate fromDate = cbFirstDate != null ? cbFirstDate.getValue() : null;&#10;            LocalDate toDate = cbEndDate != null ? cbEndDate.getValue() : null;&#10;            boolean allNV = (selectedNV == null || &quot;Tất cả&quot;.equals(selectedNV.getMaNV()));&#10;            boolean allStatus = (selectedStatus == null || &quot;Tất cả&quot;.equals(selectedStatus));&#10;            boolean allPrice = (selectedPrice == null || &quot;Tất cả&quot;.equals(selectedPrice));&#10;            ObservableList&lt;HoaDon&gt; filtered;&#10;            // Lọc theo nhân viên và trạng thái trước&#10;            ArrayList&lt;HoaDon&gt; baseList;&#10;            if (allNV &amp;&amp; allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.getAllHoaDon());&#10;            } else if (!allNV &amp;&amp; allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.searchHoaDonByMaNV(selectedNV.getMaNV()));&#10;            } else if (allNV &amp;&amp; !allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.searchHoaDonByStatus(selectedStatus));&#10;            } else {&#10;                ArrayList&lt;HoaDon&gt; byStatus = hoaDonDAO1.searchHoaDonByStatus(selectedStatus);&#10;                baseList = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : byStatus) {&#10;                    if (hd.getMaNV() != null &amp;&amp; selectedNV.getMaNV().equals(hd.getMaNV().getMaNV())) {&#10;                        baseList.add(hd);&#10;                    }&#10;                }&#10;            }&#10;            // Lọc tiếp theo khoảng giá&#10;            if (!allPrice) {&#10;                double min = 0, max = Double.MAX_VALUE;&#10;                switch (selectedPrice) {&#10;                    case &quot;Dưới 500.000&quot;:&#10;                        max = 500000;&#10;                        break;&#10;                    case &quot;500.000 - 1.000.000&quot;:&#10;                        min = 500000;&#10;                        max = 1000000;&#10;                        break;&#10;                    case &quot;1.000.000 - 2.000.000&quot;:&#10;                        min = 1000000;&#10;                        max = 2000000;&#10;                        break;&#10;                    case &quot;Trên 2.000.000&quot;:&#10;                        min = 2000000;&#10;                        max = Double.MAX_VALUE;&#10;                        break;&#10;                }&#10;                ArrayList&lt;HoaDon&gt; priceFiltered = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : baseList) {&#10;                    double tongTien = hd.getTongTien();&#10;                    if (tongTien &gt;= min &amp;&amp; tongTien &lt; max) {&#10;                        priceFiltered.add(hd);&#10;                    }&#10;                }&#10;                baseList = priceFiltered;&#10;            }&#10;            // Lọc tiếp theo ngày (lấy hóa đơn có ngày tạo nằm trong khoảng [fromDate, toDate])&#10;            if (fromDate != null || toDate != null) {&#10;                ArrayList&lt;HoaDon&gt; dateFiltered = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : baseList) {&#10;                    LocalDate ngayTao = hd.getNgayTao();&#10;                    boolean afterFrom = (fromDate == null) || !ngayTao.isBefore(fromDate);&#10;                    boolean beforeTo = (toDate == null) || !ngayTao.isAfter(toDate);&#10;                    if (afterFrom &amp;&amp; beforeTo) {&#10;                        dateFiltered.add(hd);&#10;                    }&#10;                }&#10;                baseList = dateFiltered;&#10;            }&#10;            filtered = FXCollections.observableArrayList(baseList);&#10;            table_invoice.setItems(filtered);&#10;        };&#10;        // Lắng nghe thay đổi trên cbEmployee, cbStatus, cbPrice, cbFirstDate, cbEndDate&#10;        cbEmployee.valueProperty().addListener((obs, oldNV, newNV) -&gt; filterInvoices.run());&#10;        cbStatus.valueProperty().addListener((obs, oldSt, newSt) -&gt; filterInvoices.run());&#10;        cbPrice.valueProperty().addListener((obs, oldPr, newPr) -&gt; filterInvoices.run());&#10;        if (cbFirstDate != null) cbFirstDate.valueProperty().addListener((obs, oldDate, newDate) -&gt; filterInvoices.run());&#10;        if (cbEndDate != null) cbEndDate.valueProperty().addListener((obs, oldDate, newDate) -&gt; filterInvoices.run());&#10;&#10;        // Gán sự kiện double-click vào dòng để mở dialog xem chi tiết hóa đơn&#10;        table_invoice.setOnMouseClicked(event -&gt; {&#10;            if (event.getClickCount() == 2 &amp;&amp; table_invoice.getSelectionModel().getSelectedItem() != null) {&#10;                HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;                try {&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/com/antam/app/views/sales/dialog/view_invoice.fxml&quot;));&#10;                    Parent root = loader.load();&#10;                    Object controllerObj = loader.getController();&#10;                    if (controllerObj == null) {&#10;                        System.err.println(&quot;[DEBUG] Controller is null after loading FXML! Check fx:controller and FXML path.&quot;);&#10;                    } else {&#10;                        // Truyền hóa đơn được chọn sang dialog chi tiết&#10;                        XemChiTietHoaDonController controller = (XemChiTietHoaDonController) controllerObj;&#10;                        controller.setInvoice(selectedHoaDon);&#10;                    }&#10;                    // Hiển thị dialog chi tiết hóa đơn&#10;                    Stage dialogStage = new Stage();&#10;                    dialogStage.initModality(Modality.APPLICATION_MODAL);&#10;                    dialogStage.setTitle(&quot;Chi tiết hóa đơn&quot;);&#10;                    dialogStage.setScene(new Scene(root));&#10;                    dialogStage.showAndWait();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;        // Lắng nghe thay đổi nội dung ô tìm kiếm để search realtime&#10;        txtSearchInvoice.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.trim().isEmpty()) {&#10;                // Nếu ô tìm kiếm rỗng, load lại toàn bộ hóa đơn&#10;                ObservableList&lt;HoaDon&gt; allHoaDon = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.setItems(allHoaDon);&#10;            } else {&#10;                // Nếu có nội dung, search theo mã&#10;                ObservableList&lt;HoaDon&gt; searchResult = FXCollections.observableArrayList(hoaDonDAO.searchHoaDonByMaHd(newValue));&#10;                table_invoice.setItems(searchResult);&#10;            }&#10;        });&#10;        // Sự kiện cho nút tìm kiếm vẫn giữ lại để người dùng có thể bấm nút&#10;        btnSearchInvoice.setOnAction(e -&gt; {&#10;            String maHd = txtSearchInvoice.getText();&#10;            if (maHd == null || maHd.trim().isEmpty()) {&#10;                ObservableList&lt;HoaDon&gt; allHoaDon = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.setItems(allHoaDon);&#10;            } else {&#10;                ObservableList&lt;HoaDon&gt; searchResult = FXCollections.observableArrayList(hoaDonDAO.searchHoaDonByMaHd(maHd));&#10;                table_invoice.setItems(searchResult);&#10;            }&#10;        });&#10;        // Đặt row factory để tô màu dòng được chọn&#10;        this.table_invoice.setRowFactory(tv -&gt; new javafx.scene.control.TableRow&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(HoaDon item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (!empty &amp;&amp; item != null &amp;&amp; isSelected()) {&#10;                    setStyle(&quot;-fx-background-color: #d1fae5;&quot;); // Màu xanh nhạt&#10;                } else {&#10;                    setStyle(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;        // Bỏ chọn khi click 1 lần vào dòng đã chọn&#10;        this.table_invoice.setOnMouseClicked(event -&gt; {&#10;            if (event.getClickCount() == 1) {&#10;                int selectedIndex = table_invoice.getSelectionModel().getSelectedIndex();&#10;                if (selectedIndex &gt;= 0 &amp;&amp; table_invoice.getFocusModel().getFocusedIndex() == selectedIndex) {&#10;                    table_invoice.getSelectionModel().clearSelection();&#10;                }&#10;            }&#10;            // ... giữ lại sự kiện double click mở chi tiết hóa đơn ...&#10;            if (event.getClickCount() == 2 &amp;&amp; table_invoice.getSelectionModel().getSelectedItem() != null) {&#10;                HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;                try {&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/com/antam/app/views/sales/dialog/view_invoice.fxml&quot;));&#10;                    Parent root = loader.load();&#10;                    Object controllerObj = loader.getController();&#10;                    if (controllerObj == null) {&#10;                        System.err.println(&quot;[DEBUG] Controller is null after loading FXML! Check fx:controller and FXML path.&quot;);&#10;                    } else {&#10;                        // Truyền hóa đơn được chọn sang dialog chi tiết&#10;                        XemChiTietHoaDonController controller = (XemChiTietHoaDonController) controllerObj;&#10;                        controller.setInvoice(selectedHoaDon);&#10;                    }&#10;                    // Hiển thị dialog chi tiết hóa đơn&#10;                    Stage dialogStage = new Stage();&#10;                    dialogStage.initModality(Modality.APPLICATION_MODAL);&#10;                    dialogStage.setTitle(&quot;Chi tiết hóa đơn&quot;);&#10;                    dialogStage.setScene(new Scene(root));&#10;                    dialogStage.showAndWait();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="//&#10;// Source code recreated from a .class file by IntelliJ IDEA&#10;// (powered by FernFlower decompiler)&#10;//&#10;&#10;package com.antam.app.controller;&#10;&#10;import com.antam.app.controller.dialog.DoiThuocController;&#10;import com.antam.app.controller.dialog.TraThuocController;&#10;import com.antam.app.controller.dialog.XoaSuaThuocController;&#10;import com.antam.app.dao.HoaDon_DAO;&#10;import com.antam.app.entity.HoaDon;&#10;import com.antam.app.gui.GiaoDienCuaSo;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.DatePicker;&#10;import javafx.scene.control.TableColumn;&#10;import javafx.scene.control.TableView;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.beans.property.SimpleDoubleProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;import com.antam.app.controller.dialog.XemChiTietHoaDonController;&#10;import com.antam.app.dao.NhanVien_DAO;&#10;import com.antam.app.entity.NhanVien;&#10;&#10;import java.text.DecimalFormat;&#10;import java.text.DecimalFormatSymbols;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;&#10;/**&#10; * Controller cho giao diện quản lý hóa đơn (invoice_view.fxml).&#10; * - Hiển thị danh sách hóa đơn ra TableView.&#10; * - Cho phép tạo, đổi, trả hóa đơn qua các nút chức năng.&#10; * - Khi double-click vào 1 dòng hóa đơn sẽ mở dialog chi tiết hóa đơn.&#10; */&#10;public class HoaDonController {&#10;    // Các nút chức năng&#10;    @FXML&#10;    private Button btnAddInvoice; // Nút tạo hóa đơn mới&#10;    @FXML&#10;    private Button btnReturnMedicine; // Nút doi thuốc&#10;    @FXML&#10;    private Button btnExchangeMedicine; // Nút trả thuốc&#10;&#10;    // TableView và các cột hiển thị danh sách hóa đơn&#10;    @FXML&#10;    private TableView&lt;HoaDon&gt; table_invoice; // Bảng danh sách hóa đơn&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colMaHD; // Cột mã hóa đơn&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colNgayTao; // Cột ngày tạo&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colKhachHang; // Cột mã khách hàng&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colNhanVien; // Cột mã nhân viên&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colKhuyenMai; // Cột mã khuyến mãi&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, Double&gt; colTongTien; // Cột tổng tiền&#10;    @FXML&#10;    private TableColumn&lt;HoaDon, String&gt; colTrangThai; // Cột trạng thái (đã huỷ/hoạt động)&#10;    @FXML&#10;    private javafx.scene.control.TextField txtSearchInvoice; // Ô nhập mã hóa đơn cần tìm&#10;    @FXML&#10;    private javafx.scene.control.Button btnSearchInvoice; // Nút tìm kiếm hóa đơn theo mã&#10;    @FXML&#10;    private ComboBox&lt;NhanVien&gt; cbEmployee; // ComboBox chọn nhân viên&#10;    @FXML&#10;    private ComboBox&lt;String&gt; cbStatus; // ComboBox chọn trạng thái&#10;    @FXML&#10;    private ComboBox&lt;String&gt; cbPrice; // ComboBox chọn khoảng giá&#10;    @FXML&#10;    private DatePicker cbFirstDate; // DatePicker chọn ngày bắt đầu&#10;    @FXML&#10;    private DatePicker cbEndDate;   // DatePicker chọn ngày kết thúc&#10;&#10;    // Định dạng tiền tệ kiểu Việt Nam: 1.000đ, 10.000đ&#10;    private static final DecimalFormat VND_FORMAT;&#10;    static {&#10;        DecimalFormatSymbols symbols = new DecimalFormatSymbols();&#10;        symbols.setGroupingSeparator('.');&#10;        symbols.setDecimalSeparator(',');&#10;        VND_FORMAT = new DecimalFormat(&quot;#,##0&quot;, symbols);&#10;    }&#10;&#10;    public HoaDonController() {&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo controller, gán sự kiện cho các nút và TableView.&#10;     * - Thiết lập cell value factory cho các cột TableView.&#10;     * - Load dữ liệu hóa đơn từ DB lên bảng.&#10;     * - Gán sự kiện double-click vào dòng để xem chi tiết hóa đơn.&#10;     */&#10;    public void initialize() {&#10;        // Gán sự kiện cho các nút chức năng&#10;        this.btnAddInvoice.setOnAction((e) -&gt; {&#10;            GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;themhoadon&quot;);&#10;            dialog.showAndWait();&#10;            // Sau khi dialog đóng, cập nhật lại bảng và chọn/tô màu dòng mới&#10;            HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;            ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;            table_invoice.setItems(hoaDonList);&#10;            // Tìm hoá đơn mới nhất (theo mã lớn nhất)&#10;            HoaDon newest = null;&#10;            int maxNum = -1;&#10;            for (HoaDon hd : hoaDonList) {&#10;                String ma = hd.getMaHD();&#10;                if (ma != null &amp;&amp; ma.matches(&quot;HD\\d+&quot;)) {&#10;                    int num = Integer.parseInt(ma.substring(2));&#10;                    if (num &gt; maxNum) {&#10;                        maxNum = num;&#10;                        newest = hd;&#10;                    }&#10;                }&#10;            }&#10;            if (newest != null) {&#10;                table_invoice.getSelectionModel().select(newest);&#10;                table_invoice.scrollTo(newest);&#10;            }&#10;        });&#10;        // duong&#10;        this.btnExchangeMedicine.setOnAction((e) -&gt; {&#10;            HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;            if (selectedHoaDon == null) {&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);&#10;                alert.setTitle(&quot;Cảnh báo&quot;);&#10;                alert.setHeaderText(&quot;Chưa chọn hóa đơn&quot;);&#10;                alert.setContentText(&quot;Vui lòng chọn ít nhất một hóa đơn.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }else{&#10;                GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;doithuoc&quot;);&#10;                // Lấy controller và set Thuoc vào&#10;                DoiThuocController controller = dialog.getController();&#10;                controller.setHoaDon(selectedHoaDon);&#10;                controller.showData(selectedHoaDon);&#10;                dialog.showAndWait();&#10;                HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;                ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.refresh();&#10;                table_invoice.setItems(hoaDonList);&#10;            }&#10;        });&#10;        // duong&#10;        this.btnReturnMedicine.setOnAction((e) -&gt; {&#10;            HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;            if (selectedHoaDon == null) {&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.WARNING);&#10;                alert.setTitle(&quot;Cảnh báo&quot;);&#10;                alert.setHeaderText(&quot;Chưa chọn hóa đơn&quot;);&#10;                alert.setContentText(&quot;Vui lòng chọn ít nhất một hóa đơn.&quot;);&#10;                alert.showAndWait();&#10;                return;&#10;            }else{&#10;&#10;                GiaoDienCuaSo dialog = new GiaoDienCuaSo(&quot;trathuoc&quot;);&#10;                // Lấy controller và set Thuoc vào&#10;                TraThuocController controller = dialog.getController();&#10;                controller.setHoaDon(selectedHoaDon);&#10;                controller.showData(selectedHoaDon);&#10;                dialog.showAndWait();&#10;                HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;                ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.refresh();&#10;                table_invoice.setItems(hoaDonList);&#10;            }&#10;        });&#10;&#10;        // Thiết lập cách lấy dữ liệu cho từng cột TableView&#10;&#10;        colMaHD.setCellValueFactory(new PropertyValueFactory&lt;&gt;(&quot;MaHD&quot;));&#10;        colNgayTao.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNgayTao().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;))));&#10;        colKhachHang.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaKH().getMaKH()));&#10;        colNhanVien.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaNV().getMaNV()));&#10;        colKhuyenMai.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMaKM() != null ? cellData.getValue().getMaKM().getMaKM() : &quot;&quot;));&#10;        colTongTien.setCellValueFactory(cellData -&gt; new SimpleDoubleProperty(cellData.getValue().getTongTien()).asObject());&#10;        colTongTien.setCellFactory(column -&gt; new javafx.scene.control.TableCell&lt;HoaDon, Double&gt;() {&#10;            @Override&#10;            protected void updateItem(Double item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(VND_FORMAT.format(item) + &quot;đ&quot;);&#10;                }&#10;            }&#10;        });&#10;        colTrangThai.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().isDeleteAt() ? &quot;Đã huỷ&quot; : &quot;Hoạt động&quot;));&#10;&#10;        // Load dữ liệu hóa đơn từ DB lên bảng&#10;        HoaDon_DAO hoaDonDAO = new HoaDon_DAO();&#10;        ObservableList&lt;HoaDon&gt; hoaDonList = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;        table_invoice.setItems(hoaDonList);&#10;&#10;        // --- Khởi tạo ComboBox nhân viên ---&#10;        NhanVien_DAO nhanVienDAO = new NhanVien_DAO();&#10;        ObservableList&lt;NhanVien&gt; dsNhanVien = FXCollections.observableArrayList(NhanVien_DAO.getDsNhanVienformDBS());&#10;        // Thêm lựa chọn &quot;Tất cả&quot; vào đầu danh sách&#10;        NhanVien tatCaNV = new NhanVien(&quot;Tất cả&quot;);&#10;        dsNhanVien.add(0, tatCaNV);&#10;        cbEmployee.setItems(dsNhanVien);&#10;        cbEmployee.setPromptText(&quot;Chọn nhân viên&quot;);&#10;        // Hiển thị chỉ mã nhân viên trong ComboBox, &quot;Tất cả&quot; nếu là lựa chọn đặc biệt&#10;        cbEmployee.setCellFactory(lv -&gt; new javafx.scene.control.ListCell&lt;NhanVien&gt;() {&#10;            @Override&#10;            protected void updateItem(NhanVien item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setText(empty || item == null ? null : item.getMaNV());&#10;            }&#10;        });&#10;        cbEmployee.setButtonCell(new javafx.scene.control.ListCell&lt;NhanVien&gt;() {&#10;            @Override&#10;            protected void updateItem(NhanVien item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setText(empty || item == null ? null : item.getMaNV());&#10;            }&#10;        });&#10;        // --- Khởi tạo ComboBox trạng thái ---&#10;        ObservableList&lt;String&gt; dsTrangThai = FXCollections.observableArrayList(&quot;Tất cả&quot;, &quot;Hoạt động&quot;, &quot;Đã huỷ&quot;);&#10;        cbStatus.setItems(dsTrangThai);&#10;        cbStatus.setValue(&quot;Tất cả&quot;);&#10;        // --- Khởi tạo ComboBox khoảng giá ---&#10;        ObservableList&lt;String&gt; dsKhoangGia = FXCollections.observableArrayList(&#10;            &quot;Tất cả&quot;,&#10;            &quot;Dưới 500.000&quot;,&#10;            &quot;500.000 - 1.000.000&quot;,&#10;            &quot;1.000.000 - 2.000.000&quot;,&#10;            &quot;Trên 2.000.000&quot;&#10;        );&#10;        cbPrice.setItems(dsKhoangGia);&#10;        cbPrice.setValue(&quot;Tất cả&quot;);&#10;&#10;        // --- Hàm lọc hóa đơn theo nhân viên, trạng thái, khoảng giá, ngày ---&#10;        Runnable filterInvoices = () -&gt; {&#10;            HoaDon_DAO hoaDonDAO1 = new HoaDon_DAO();&#10;            NhanVien selectedNV = cbEmployee.getValue();&#10;            String selectedStatus = cbStatus.getValue();&#10;            String selectedPrice = cbPrice.getValue();&#10;            LocalDate fromDate = cbFirstDate != null ? cbFirstDate.getValue() : null;&#10;            LocalDate toDate = cbEndDate != null ? cbEndDate.getValue() : null;&#10;            boolean allNV = (selectedNV == null || &quot;Tất cả&quot;.equals(selectedNV.getMaNV()));&#10;            boolean allStatus = (selectedStatus == null || &quot;Tất cả&quot;.equals(selectedStatus));&#10;            boolean allPrice = (selectedPrice == null || &quot;Tất cả&quot;.equals(selectedPrice));&#10;            ObservableList&lt;HoaDon&gt; filtered;&#10;            // Lọc theo nhân viên và trạng thái trước&#10;            ArrayList&lt;HoaDon&gt; baseList;&#10;            if (allNV &amp;&amp; allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.getAllHoaDon());&#10;            } else if (!allNV &amp;&amp; allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.searchHoaDonByMaNV(selectedNV.getMaNV()));&#10;            } else if (allNV &amp;&amp; !allStatus) {&#10;                baseList = new ArrayList&lt;&gt;(hoaDonDAO1.searchHoaDonByStatus(selectedStatus));&#10;            } else {&#10;                ArrayList&lt;HoaDon&gt; byStatus = hoaDonDAO1.searchHoaDonByStatus(selectedStatus);&#10;                baseList = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : byStatus) {&#10;                    if (hd.getMaNV() != null &amp;&amp; selectedNV.getMaNV().equals(hd.getMaNV().getMaNV())) {&#10;                        baseList.add(hd);&#10;                    }&#10;                }&#10;            }&#10;            // Lọc tiếp theo khoảng giá&#10;            if (!allPrice) {&#10;                double min = 0, max = Double.MAX_VALUE;&#10;                switch (selectedPrice) {&#10;                    case &quot;Dưới 500.000&quot;:&#10;                        max = 500000;&#10;                        break;&#10;                    case &quot;500.000 - 1.000.000&quot;:&#10;                        min = 500000;&#10;                        max = 1000000;&#10;                        break;&#10;                    case &quot;1.000.000 - 2.000.000&quot;:&#10;                        min = 1000000;&#10;                        max = 2000000;&#10;                        break;&#10;                    case &quot;Trên 2.000.000&quot;:&#10;                        min = 2000000;&#10;                        max = Double.MAX_VALUE;&#10;                        break;&#10;                }&#10;                ArrayList&lt;HoaDon&gt; priceFiltered = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : baseList) {&#10;                    double tongTien = hd.getTongTien();&#10;                    if (tongTien &gt;= min &amp;&amp; tongTien &lt; max) {&#10;                        priceFiltered.add(hd);&#10;                    }&#10;                }&#10;                baseList = priceFiltered;&#10;            }&#10;            // Lọc tiếp theo ngày (lấy hóa đơn có ngày tạo nằm trong khoảng [fromDate, toDate])&#10;            if (fromDate != null || toDate != null) {&#10;                ArrayList&lt;HoaDon&gt; dateFiltered = new ArrayList&lt;&gt;();&#10;                for (HoaDon hd : baseList) {&#10;                    LocalDate ngayTao = hd.getNgayTao();&#10;                    boolean afterFrom = (fromDate == null) || !ngayTao.isBefore(fromDate);&#10;                    boolean beforeTo = (toDate == null) || !ngayTao.isAfter(toDate);&#10;                    if (afterFrom &amp;&amp; beforeTo) {&#10;                        dateFiltered.add(hd);&#10;                    }&#10;                }&#10;                baseList = dateFiltered;&#10;            }&#10;            filtered = FXCollections.observableArrayList(baseList);&#10;            table_invoice.setItems(filtered);&#10;        };&#10;        // Lắng nghe thay đổi trên cbEmployee, cbStatus, cbPrice, cbFirstDate, cbEndDate&#10;        cbEmployee.valueProperty().addListener((obs, oldNV, newNV) -&gt; filterInvoices.run());&#10;        cbStatus.valueProperty().addListener((obs, oldSt, newSt) -&gt; filterInvoices.run());&#10;        cbPrice.valueProperty().addListener((obs, oldPr, newPr) -&gt; filterInvoices.run());&#10;        if (cbFirstDate != null) cbFirstDate.valueProperty().addListener((obs, oldDate, newDate) -&gt; filterInvoices.run());&#10;        if (cbEndDate != null) cbEndDate.valueProperty().addListener((obs, oldDate, newDate) -&gt; filterInvoices.run());&#10;&#10;        // Gán sự kiện double-click vào dòng để mở dialog xem chi tiết hóa đơn&#10;        table_invoice.setOnMouseClicked(event -&gt; {&#10;            if (event.getClickCount() == 2 &amp;&amp; table_invoice.getSelectionModel().getSelectedItem() != null) {&#10;                HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;                try {&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/com/antam/app/views/sales/dialog/view_invoice.fxml&quot;));&#10;                    Parent root = loader.load();&#10;                    Object controllerObj = loader.getController();&#10;                    if (controllerObj == null) {&#10;                        System.err.println(&quot;[DEBUG] Controller is null after loading FXML! Check fx:controller and FXML path.&quot;);&#10;                    } else {&#10;                        // Truyền hóa đơn được chọn sang dialog chi tiết&#10;                        XemChiTietHoaDonController controller = (XemChiTietHoaDonController) controllerObj;&#10;                        controller.setInvoice(selectedHoaDon);&#10;                    }&#10;                    // Hiển thị dialog chi tiết hóa đơn&#10;                    Stage dialogStage = new Stage();&#10;                    dialogStage.initModality(Modality.APPLICATION_MODAL);&#10;                    dialogStage.setTitle(&quot;Chi tiết hóa đơn&quot;);&#10;                    dialogStage.setScene(new Scene(root));&#10;                    dialogStage.showAndWait();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;        // Lắng nghe thay đổi nội dung ô tìm kiếm để search realtime&#10;        txtSearchInvoice.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.trim().isEmpty()) {&#10;                // Nếu ô tìm kiếm rỗng, load lại toàn bộ hóa đơn&#10;                ObservableList&lt;HoaDon&gt; allHoaDon = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.setItems(allHoaDon);&#10;            } else {&#10;                // Nếu có nội dung, search theo mã&#10;                ObservableList&lt;HoaDon&gt; searchResult = FXCollections.observableArrayList(hoaDonDAO.searchHoaDonByMaHd(newValue));&#10;                table_invoice.setItems(searchResult);&#10;            }&#10;        });&#10;        // Sự kiện cho nút tìm kiếm vẫn giữ lại để người dùng có thể bấm nút&#10;        btnSearchInvoice.setOnAction(e -&gt; {&#10;            String maHd = txtSearchInvoice.getText();&#10;            if (maHd == null || maHd.trim().isEmpty()) {&#10;                ObservableList&lt;HoaDon&gt; allHoaDon = FXCollections.observableArrayList(hoaDonDAO.getAllHoaDon());&#10;                table_invoice.setItems(allHoaDon);&#10;            } else {&#10;                ObservableList&lt;HoaDon&gt; searchResult = FXCollections.observableArrayList(hoaDonDAO.searchHoaDonByMaHd(maHd));&#10;                table_invoice.setItems(searchResult);&#10;            }&#10;        });&#10;        // Đặt row factory để tô màu dòng được chọn&#10;        this.table_invoice.setRowFactory(tv -&gt; new javafx.scene.control.TableRow&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(HoaDon item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (!empty &amp;&amp; item != null &amp;&amp; isSelected()) {&#10;                    setStyle(&quot;-fx-background-color: #d1fae5;&quot;); // Màu xanh nhạt&#10;                } else {&#10;                    setStyle(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;        // Bỏ chọn khi click 1 lần vào dòng đã chọn (chỉ double click mới bỏ chọn)&#10;        this.table_invoice.setOnMouseClicked(event -&gt; {&#10;            if (event.getClickCount() == 2) {&#10;                int selectedIndex = table_invoice.getSelectionModel().getSelectedIndex();&#10;                if (selectedIndex &gt;= 0 &amp;&amp; table_invoice.getFocusModel().getFocusedIndex() == selectedIndex) {&#10;                    table_invoice.getSelectionModel().clearSelection();&#10;                }&#10;            }&#10;            // Sự kiện double click mở chi tiết hóa đơn&#10;            if (event.getClickCount() == 2 &amp;&amp; table_invoice.getSelectionModel().getSelectedItem() != null) {&#10;                HoaDon selectedHoaDon = table_invoice.getSelectionModel().getSelectedItem();&#10;                try {&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/com/antam/app/views/sales/dialog/view_invoice.fxml&quot;));&#10;                    Parent root = loader.load();&#10;                    Object controllerObj = loader.getController();&#10;                    if (controllerObj == null) {&#10;                        System.err.println(&quot;[DEBUG] Controller is null after loading FXML! Check fx:controller and FXML path.&quot;);&#10;                    } else {&#10;                        // Truyền hóa đơn được chọn sang dialog chi tiết&#10;                        XemChiTietHoaDonController controller = (XemChiTietHoaDonController) controllerObj;&#10;                        controller.setInvoice(selectedHoaDon);&#10;                    }&#10;                    // Hiển thị dialog chi tiết hóa đơn&#10;                    Stage dialogStage = new Stage();&#10;                    dialogStage.initModality(Modality.APPLICATION_MODAL);&#10;                    dialogStage.setTitle(&quot;Chi tiết hóa đơn&quot;);&#10;                    dialogStage.setScene(new Scene(root));&#10;                    dialogStage.showAndWait();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>